Generación de Números Aleatorios

program NumAleatorio;
var num: integer;
begin
 Randomize; 
 num := random (100); {valores en el intervalo 0 a 99}
 writeln ('El numero aleatorio generado es: ', num);
 readln;
end.
------------------------------------------------------------



Listas - Declaración


Program programaLista;
Type 
lista=^nodo;
nodo=record
 datos: integer;
 sig: lista;
end;
Begin
End.


-------------------------
Listas – Agregar Adelante

Procedure AgregarAdelante(var L:lista; elem: integer);
Var nue:Lista;
Begin
 New(nue);
 nue^.datos:=elem;
 nue^.sig:=L;
 L:=nue;
End;

--------------------------
Listas – Agregar Atrás


procedure AgregarAtras (var pri, ult: lista; elem: integer);
var nue : lista;
begin
new (nue);
nue^.datos:= elem;
nue^.sig := NIL;
if pri <> Nil then
 ult^.sig := nue
 else
 pri := nue;
ult := nue;
end;

-----------------------------------

Listas – Agregar Atrás
Procedure InsertarEnLista ( var pri: lista; elem: integer);
var ant, nue, act: lista;
begin
 new (nue);
 nue^.datos := elem;
 act := pri;
 while (act<>NIL) and (act^.datos < elem) do begin
 ant := act;
 act := act^.sig ;
 end;
 if (act = pri) then pri := nue 
 else ant^.sig := nue;
 nue^.sig := act ;
end;
---------------------------------------


Listas – Insertar Ordenado
Program programaVector;
Const
– DimF = 10;
Type
 vector = Array [ 1..DimF] of integer;
Begin
End.
-------------------------------------


Vectores - Declaración

Program programaVector;
Const
– DimF = 10;
Type
 vector = Array [ 1..DimF] of integer;
Begin
End.


-----------------------------------------
ARREGLOS – Ordenación - Selección


Procedure Ordenar ( var v: tVector; dimLog: indice );

var i, j, p: indice; item : tipoElem;	
		
begin
 for i:=1 to dimLog-1 do begin {busca el mínimo y guarda en p la posición}
          p := i;
          for j := i+1 to dimLog do
             if v[ j ] < v[ p ] then p:=j;

         {intercambia v[i] y v[p]}
         item := v[ p ];   
         v[ p ] := v[ i ];   
         v[ i ] := item;
      end;
end;
------------------------------------

ARREGLOS – Ordenación - Inserción

Procedure Ordenar ( var v: tVector; dimLog: indice );
var i, j: indice; actual: tipoElem;	
		
begin
 for i:=2 to dimLog do begin 
     actual:= v[i];
     j:= i-1; 
     while (j > 0) y (v[j] > actual) do      
       begin
         v[j+1]:= v[j];
         j:= j – 1;                  
       end;  
     v[j+1]:= actual; 
 end;
end;
-----------------------------------

declarar un arbol

 arbol = ^nodoArbol;
     nodoArbol = record
                    dato: socio;
                    HI: arbol;
                    HD: arbol;
                 end;

-----------------------
insertar un elemento ordenado en un arbol

Procedure InsertarElemento (var a: arbol; elem: socio);
  Begin
    if (a = nil) 
    then begin
           new(a);
           a^.dato:= elem; 
           a^.HI:= nil; 
           a^.HD:= nil;
         end
    else if (elem.numero < a^.dato.numero) 
         then InsertarElemento(a^.HI, elem)
         else InsertarElemento(a^.HD, elem); 
  End;

------------------------------------

generar un arbol

a:= nil;
 LeerSocio (unSocio);
 while (unSocio.numero <> 0)do
  begin
   InsertarElemento (a, unSocio);
   writeln;
   LeerSocio (unSocio);
  end;
end;

---------------------------------------
buscar dentro delarbol un numero mas grande si esta ordenado por el mismo numero


function NumeroMasGrande (a: arbol): integer;
  begin
    if (a = nil) then NumeroMasGrande:= -1
    else if (a^.HD = nil) then NumeroMasGrande:= a^.dato.numero
                          else NumeroMasGrande:= NumeroMasGrande (a^.HD);
  end;


  writeln;
  writeln ('----- Informar Numero Socio Mas Grande ----->');
  writeln;
  max:= NumeroMasGrande (a);
  if (max = -1) 
  then writeln ('Arbol sin elementos')
  else begin
         writeln;
         writeln ('Numero de socio mas grande: ', max);
         writeln;
       end;
-----------------------

numero mas chico

function SocioMasChico (a: arbol): arbol;
  begin
    if ((a = nil) or (a^.HI = nil))
    then SocioMasChico:= a
    else SocioMasChico:= SocioMasChico (a^.HI);
  end;
   
var minSocio: arbol;
begin
  writeln;
  writeln ('----- Informar Datos Socio Numero Mas Chico ----->');
  writeln;
  minSocio:= SocioMasChico (a);
  if (minSocio = nil) 
  then writeln ('Arbol sin elementos')
  else begin
         writeln;
         writeln ('Socio con numero mas chico: ', minSocio^.dato.numero, ' Nombre: ', minSocio^.dato.nombre, ' Edad: ', minSocio^.dato.edad); 
         writeln;
       end;
end;

----------------------------------------

